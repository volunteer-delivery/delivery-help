const { session, Composer, Telegraf, Scenes } = require('telegraf');
const { showMenu, registerMenuHandlers } = require('./menu');
const { driverStateMiddleware, ridesStateMiddleware, driverComposerOptional } = require('./middlewares');
const newDriverScene = require('./new-driver-scene');
const newRideScene = require('./new-ride-scene');

const welcome = new Composer(
    driverComposerOptional(true, async (ctx) => {
        await showMenu(ctx);
    }),
    driverComposerOptional(false, async (ctx) => {
        await ctx.reply("–í—ñ—Ç–∞—î–º–æ üëãüèª");
        await ctx.reply(
            "–í–æ–ª–æ–Ω—Ç–µ—Ä–í–∞–Ω—Ç–∞–∂ - —Ü–µ —á–∞—Ç-–±–æ—Ç –¥–ª—è –≤–æ–¥—ñ—ó–≤, —è–∫—ñ –∑–∞–π–º–∞—é—Ç—å—Å—è –ª–µ–≥–∫–æ–≤–∏–º–∏ " +
            "—Ç–∞ –≤–∞–Ω—Ç–∞–∂–Ω–∏–º–∏ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è–º–∏, —ñ –º–æ–∂—É—Ç—å –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º —ñ–∑ " +
            "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º —Ä—ñ–∑–Ω–æ–≥–æ —Ä–æ–¥—É –æ–±'—î–∫—Ç—ñ–≤ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ –∞–±–æ –∑-–∑–∞ –∫–æ—Ä–¥–æ–Ω—É."
        );
        await ctx.reply(
            "‚òùüèª –©–æ–± –¥–æ–ª—É—á–∏—Ç–∏—Å—è, –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É " +
            "—ñ –ø—Ä–∏–π–Ω—è—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫ –≤—ñ–¥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞, —è–∫–∏–π –Ω–∞–¥–∞—Å—Ç—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π."
        );
        await ctx.scene.enter('new-driver-wizard');
    })
);

const stage = new Scenes.Stage(
    [newDriverScene, newRideScene],
    { ttl: 2 * 60 }
);

let bot;

function initializeBotServer(token) {
    bot = new Telegraf(token);

    bot.use(session());
    bot.use(driverStateMiddleware());
    bot.use(ridesStateMiddleware());
    bot.use(stage.middleware());
    registerMenuHandlers(bot, newRideScene);

    // TODO: delete this command before going to production
    bot.command('clearDev',async (ctx) => {
            const { driverModel, rideModel } = require('../models');
            const drivers = await driverModel.find({ _telegramId: { $ne: null } });
            const rm = await rideModel.deleteMany({ driver: {$in: drivers } });
            const dm = await driverModel.deleteMany({ _telegramId: { $ne: null } });
            await ctx.reply(`Deleted rides: ${rm.deletedCount }`);
            await ctx.reply(`Deleted drivers: ${dm.deletedCount}`);
    });


    // TODO: delete this command before going to production
    bot.command('finishRides', async (ctx) => {
        for (ride of ctx.state.rides) {
            if (ride.status != 'FINISHED') {
                ride.status = 'FINISHED';
                await ride.save();
            }
        }
        await ctx.reply('Rides was finishd');
        await showMenu(ctx);
    });

    bot.start(welcome);

    bot.on('text', driverComposerOptional(false, welcome), async (ctx, next) => {
        if (ctx.session.hasOwnProperty('__scenes') && ctx.session.__scenes.current) {
            next();
        } else {
            await showMenu(ctx);
        }
    });

    bot.launch();
};

function notifyNewStatus(ride) {
    let msg;
    switch (ride.status) {
        case 'FINISHED':
            msg = '–í–∞—à–∞ –ø–æ—ó–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è. –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥—É! –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ üíôüíõ';
            break;
        case 'PENDING':
            break;
        case 'ACTIVE':
            msg = '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞—à—É –ø–æ—ó–∑–¥–∫—É –æ–±—Ä–æ–±–ª–µ–Ω–æ —ñ —Ç–µ–ø–µ—Ä –≤–æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ë–∞–∂–∞—î–º–æ –≥–∞—Ä–Ω–æ—ó –¥–æ—Ä–æ–≥–∏ üôåüèª';
            break;
    }

    if (ride.driver?._telegramId && msg) {
        bot?.telegram.sendMessage(ride.driver?._telegramId, msg);
    }
}

module.exports = {
    initializeBotServer,
    notifyNewStatus
};
